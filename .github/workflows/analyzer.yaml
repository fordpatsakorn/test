name: 'Dotnet Unit Test'

on:
  pull_request:
    branches: ['main']

jobs:
  build:
    name: 'Build'
    permissions: write-all
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.x

      - name: Build Solution
        run: dotnet build test-app | tee build.log # Output to both build.log and stdout, required for `Extract warning` step

      - name: Extract warning
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { getChangedFileLineData } = require('./scripts/get-changed-lines');
            
            const logContent = fs.readFileSync('build.log', "utf-8");
            const changedFileLineData = getChangedFileLineData();  // [{ name: string, lines: [[startLine, endLine]] }]

            // Map patterns object. Add rules to be detected here.
            const rulePatterns = {
              Warning: { ids: ['FAWRN\\d+'], type: 'Warning' },
              Information: { ids: ['FAINF\\d+], type: 'Information' },
              Error: { ids: [], type: 'Error' }
            };
            // Example match: `MyFile.cs(12,4): warning AB1234: 'Foo' is obsolete (http://example.com)`
            const patterns = Object.values(rulePatterns).map(({ ids, type }) => ({
              pattern: new RegExp(
                `^(?:Warning: |Error: )?(.+\\.cs)\\((\\d+),(\\d+)\\): (?:warning|error|information) (${ids.join('|')}): (.+?)(?: \\((https?:\\/\\/[^)]+)\\))?(?: \\[.+\\])?$`
              ),
              type: type
            }));
            const lines = [
              "## Code Analyzer Warning",
              "| **File** | **Code** | **Type** | **Description** | **More Info** |",
              "|--|--|--|--|--|"
            ];
            let foundWarning = false;
            let foundMatch = false;
            const seen = new Set();
            const annotations = [];

            // Process matched line and convert to markdown + GitHub annotation
            function processMatch(match, type, lineData) {
              if (!foundWarning && (type === 'Warning' || type === 'Error')) {
                foundWarning = true;
                lines.splice(1, 0, "## ⚠️ **Warning found. Please contact your squad lead for more information.** ⚠️");
              }
              const [_, file, lineNum, col, code, desc, link] = match;
              const resolved = path.resolve(file);
              const relative = path.relative(path.resolve(process.cwd()), resolved);
            
              let isLineChanged = false;
              const fileEntry = lineData.find(entry => entry.name === relative);
              if (fileEntry) { // If file exists, check if the line is actually part of the changed hunk
                isLineChanged = fileEntry.lines.some(([start, end]) => lineNum >= start && lineNum <= end);
                if (!isLineChanged) { return; }
              } else { return; }
            
              const dedupKey = `${resolved}:${lineNum}:${col}:${code}`;
              if (seen.has(dedupKey)) return; // Skip duplicates
              seen.add(dedupKey);
            
              const escapedDesc = desc.replace(/\|/g, "\\|"); // Escape | in description, it can break md table
              lines.push(`| ${relative} (${lineNum},${col}) | ${code} | ${type} | ${escapedDesc} | ${link ?? '-'} |`);
              const annotationLevel =
                type === 'Warning' ? 'warning' :
                type === 'Information' ? 'notice' :
                type === 'Error' ? 'failure' : 'notice';
              annotations.push({
                path: relative,
                start_line: parseInt(lineNum),
                end_line: parseInt(lineNum),
                annotation_level: annotationLevel,
                message: `${escapedDesc} ${link ? ` More info: ${link}` : ''}`,
                title: `${code} in ${relative}`,
              });
            }
            
            logContent.split("\n").forEach((line) => {
              patterns.some(({ pattern, type }) => {
                const match = line.match(pattern);
                if (match) {
                  foundMatch = true;
                  processMatch(match, type, changedFileLineData);
                  return true;
                }
                return false;
              });
            });
            const mdComment = lines.join("\n");

            // Delete old comment, if exist. Then check if any match exist then comment.
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            const previousComment = comments.data.find(comment => comment.body.includes("Code Analyzer Warning") && comment.user.type === 'Bot');
            if (previousComment != null) {
              const deleteResponse = await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previousComment.id
              });
            }
            if (foundMatch) {
              const commentResponse = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: mdComment
              });
              const checksResponse = await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Code Analyzer Check',
                head_sha: '${{ github.event.pull_request.head.sha }}',
                status: 'completed',
                conclusion: foundWarning ? 'failure' : 'success',
                output: {
                  title: 'Code Analyzer Check',
                  summary: 'There are potential issues detected by code analyzer',
                  annotations: annotations
                }
              });
            }
            console.log(mdComment);